apply plugin: 'java'
apply plugin: 'application'
// apply plugin: 'eclipse'

repositories {
    jcenter()
}

dependencies {
  implementation (project(':Noter-plugins')) {
    transitive = false
  } 
  
  implementation files('myutils.jar')
  implementation 'org.json:json:20180130'
  implementation 'org.codejargon.feather:feather:+'
  
  implementation 'org.apache.logging.log4j:log4j-api:2.11.2'
  implementation 'org.apache.logging.log4j:log4j-core:2.11.2'  
}
 

version = '1.35'
sourceCompatibility = JavaVersion.VERSION_1_8 
targetCompatibility = JavaVersion.VERSION_1_8
 
mainClassName = 'Main'

ext.appdir = file("${System.env.SAM_PROGRAMS}\\noter\\app")

run {
    systemProperties['java.util.logging.config.file'] = file('logging.properties').absolutePath
    systemProperties['java.io.tmpdir'] = file('java_temp').absolutePath
    args new File('dummy.zip.jbook').absolutePath
    
    workingDir appdir.parent
    
}
task deleteJars {
  doLast {
     file(appdir).listFiles().each({
       if(it.name.endsWith('.jar'))
         it.delete();
     });
  }
}

task install(type: Copy, dependsOn:[installDist, deleteJars]) {
  
  def libdir = file(new File(installDist.destinationDir, 'lib')) 
  from libdir
  into appdir
  
  doLast {
     new File(appdir, 'run.cmd').text = """
  @echo off
  setlocal
  
  ${versionText()}
  
  start \"noter\" javaw  %JVM_OPTS% %JAVA_OPTS% -cp \"%~dp0;%~dp0${String.join(';%~dp0', libdir.list())}\" ${mainClassName} %*
  
  """.stripIndent()
  } 
}

def versionText() {
  if(!version || version == 'unspecified') return '';
  return """
  SET APP_VERSION=${version}
  if [%1]==[-v] (
    echo version: %APP_VERSION%
    goto:eof
  )
  if [%1]==[--version] (
    echo version: %APP_VERSION%
    goto:eof
  )
  """;    
}

jar {
  exclude 'fxml/*.fxgraph'
}

defaultTasks 'install'


